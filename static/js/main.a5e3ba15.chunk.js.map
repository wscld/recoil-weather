{"version":3,"sources":["atoms/weather/index.js","services/openweathermap.js","atoms/weather/selectors/forecast.js","components/Weather/index.jsx","utils.js","pages/Home/index.jsx","App.js","serviceWorker.js","index.js"],"names":["locationState","atom","key","default","getWeatherForCity","city","a","axios","method","url","params","q","units","appid","process","response","data","Error","fetchForecast","selector","get","location","forecast","error","list","Weather","useRecoilValue","className","map","item","time","dt","Date","toLocaleString","alt","src","weather","icon","main","temp","temp_max","temp_min","Home","useRecoilState","setLocation","useState","input","setInput","placeholder","onChange","e","text","target","value","onClick","fallback","href","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"uQAEaA,EAAgBC,eAAK,CAC9BC,IAAK,gBACLC,QAAQ,KAGGH,I,wCCHFI,EAAiB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,+EAEFC,IAAM,CACzBC,OAAQ,MACRC,IAAK,mDACLC,OAAQ,CACJC,EAAGN,EACHO,MAAM,SACNC,MAVJC,sCAEqB,cAEnBC,EAFmB,yBAWlBA,EAASC,MAXS,sCAanBC,MAAM,EAAD,IAbc,yDAAH,sDCiBfC,EAjBcC,mBAAS,CAClCjB,IAAK,gBACLkB,IAAI,WAAD,4BAAE,iCAAAd,EAAA,yDAASc,EAAT,EAASA,IAEO,MADXC,EAAWD,EAAIpB,IADpB,0CAI8BI,EAAkBiB,GAJhD,cAIaC,EAJb,yBAKcA,GALd,2DAOc,CAACC,MAAM,EAAD,KAPpB,yDAUU,CAACC,KAAK,KAVhB,0DAAF,mDAAC,KCsBOC,G,MAtBQ,WACnB,IAAMH,EAAWI,yBAAeR,GAEhC,OACI,yBAAKS,UAAU,qBACVL,EAASE,KAAKF,EAASE,KAAKI,KAAI,SAACC,GAAD,OAC7B,yBAAKF,UAAU,QACX,yBAAKA,UAAU,SCbRG,EDa2BD,EAAKE,GCZhD,IAAIC,KAAY,IAAPF,GAAaG,eAAe,WDa5B,yBAAKN,UAAU,WACX,yBAAKA,UAAU,QAAO,yBAAKO,IAAI,GAAGC,IAAK,oCAAuCN,EAAKO,QAAQ,GAAGC,KAAO,aACrG,6BACI,yBAAKV,UAAU,QAAf,gBAAoCE,EAAKS,KAAKC,MAC9C,yBAAKZ,UAAU,YAAf,cAAmCE,EAAKS,KAAKE,UAC7C,yBAAKb,UAAU,YAAf,cAAmCE,EAAKS,KAAKG,aCnB/C,IAACX,KDuBZ,yBAAKH,UAAU,SAAf,yBEhBFe,G,MAAO,WAAO,IAAD,EACUC,yBAAe3C,GADzB,mBACL4C,GADK,aAEIC,mBAAS,IAFb,mBAEfC,EAFe,KAERC,EAFQ,KAYtB,OACI,yBAAKpB,UAAU,kBACX,yBAAKA,UAAU,QACX,2BAAOqB,YAAY,YAAYC,SAAU,SAAAC,GAAC,OAPhCC,EAOiDD,EAAEE,OAAOC,WAN5EN,EAASI,GADQ,IAACA,KAQV,4BAAQG,QAZC,WACjBV,EAAYE,KAWJ,eAEJ,kBAAC,WAAD,CAAUS,SAAU,yBAAK5B,UAAU,WAAf,kBAChB,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,UAAf,YAAiC,uBAAG6B,KAAK,6BAA6BJ,OAAO,UAA5C,sBCjB9BK,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOtC,SAASuC,UAEe,UAA7BD,OAAOtC,SAASuC,UAEhBD,OAAOtC,SAASuC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,aAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlD,GACLmD,QAAQnD,MAAMA,EAAMoD,c","file":"static/js/main.a5e3ba15.chunk.js","sourcesContent":["import { atom } from \"recoil\";\r\n\r\nexport const locationState = atom({\r\n    key: 'locationState',\r\n    default:''\r\n});\r\n\r\nexport default locationState;","import axios from 'axios';\r\n\r\nconst key = process.env.REACT_APP_API_KEY;\r\n\r\nexport const getWeatherForCity = async (city) => {\r\n    try {\r\n        const response = await axios({\r\n            method: 'get',\r\n            url: 'https://api.openweathermap.org/data/2.5/forecast',\r\n            params: {\r\n                q: city,\r\n                units:'metric',\r\n                appid: key\r\n            }\r\n        });\r\n        return response.data;\r\n    } catch(err){\r\n        throw Error(err);\r\n    }\r\n}\r\n","import { selector } from \"recoil\";\r\nimport locationState from '../index';\r\nimport { getWeatherForCity } from \"../../../services/openweathermap\";\r\n\r\nexport const fetchForecast = selector({\r\n    key: 'fetchForecast',\r\n    get: async ({ get }) => {\r\n        const location = get(locationState);\r\n        if (location !== '') {\r\n            try {\r\n                const forecast = await getWeatherForCity(location);\r\n                return forecast;\r\n            } catch(err){\r\n                return {error:err}\r\n            }\r\n        } else {\r\n            return {list:[]}\r\n        }\r\n    }\r\n});\r\n\r\nexport default fetchForecast;","import React from 'react'\r\nimport { useRecoilValue } from 'recoil';\r\nimport fetchForecast from '../../atoms/weather/selectors/forecast';\r\nimport './styles.scss'\r\nimport { formatTime } from '../../utils';\r\n\r\nexport const Weather = () => {\r\n    const forecast = useRecoilValue(fetchForecast);\r\n\r\n    return (\r\n        <div className=\"weather-component\">\r\n            {forecast.list?forecast.list.map((item) => (\r\n                <div className=\"item\">\r\n                    <div className=\"date\">{formatTime(item.dt)}</div>\r\n                    <div className=\"content\">\r\n                        <div className=\"icon\"><img alt=\"\" src={'http://openweathermap.org/img/wn/' + (item.weather[0].icon) +'@2x.png'} /></div>\r\n                        <div>\r\n                            <div className=\"temp\">Temperatura: {item.main.temp}</div>\r\n                            <div className=\"max-temp\">Máxima: {item.main.temp_max}</div>\r\n                            <div className=\"min-temp\">Mínima: {item.main.temp_min}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )):<div className=\"error\">Não encontrado.</div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Weather;","export const formatTime = (time) => {\r\n    return new Date(time * 1000).toLocaleString(\"pt-BR\");\r\n\r\n}","import React, { Suspense } from 'react';\r\nimport { useRecoilState } from 'recoil';\r\nimport { locationState } from '../../atoms/weather';\r\nimport { useState } from 'react';\r\nimport Weather from '../../components/Weather';\r\nimport './styles.scss';\r\n\r\nexport const Home = () => {\r\n    const [location, setLocation] = useRecoilState(locationState);\r\n    const [input, setInput] = useState('');\r\n\r\n    const handleSearch = () => {\r\n        setLocation(input);\r\n    }\r\n\r\n    const handleChange = (text) => {\r\n        setInput(text)\r\n    }\r\n\r\n    return (\r\n        <div className=\"home-component\">\r\n            <div className=\"form\">\r\n                <input placeholder=\"cidade...\" onChange={e => handleChange(e.target.value)}></input>\r\n                <button onClick={handleSearch}> Procurar </button>\r\n            </div>\r\n            <Suspense fallback={<div className=\"loading\">carregando...</div>}>\r\n                <Weather />\r\n            </Suspense>\r\n            <div className=\"footer\">API from <a href=\"http://openweathermap.org/\" target=\"_blank\">openweathermap</a></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport { Home } from './pages/Home';\n\nfunction App() {\n  return (\n    <>\n      <Home />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {RecoilRoot} from 'recoil';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}